#include <mtime.h>
#include <string.h>
#include <stdio.h>
void setup()
{
   output_a(0x00);
   output_b(0x00);
   output_c(0x00);
   output_d(0x00);
   output_e(0x00);
   
   delay_ms(DEFAULT_D);
   
   if(DEBUG)
   {
      fprintf(RS232,"********************************\r");
      fprintf(RS232,"       Grupo APM (c) 2020       \r");
      fprintf(RS232,"================================\r");
      fprintf(RS232,"Bluetooth Basketball Score Board\r");
      fprintf(RS232,"================================\r");
      fprintf(RS232, "Version %s - rev %s \r", FW_VERSION, FW_REVISION);
      fprintf(RS232,"********************************\r");
      fprintf(RS232,"      DEPURACION :: TIEMPO      \r");
   }
   else
   {
      fputs("Grupo APM (c) 2020 :: BBSB 1.0 rev A",RS232);
   }
   
   delay_ms(DEFAULT_D);
   
   if(DEBUG) {fputs("> Configuracion de Puertos",RS232);}
   //TODO: Activar puertos
   pTiroSU.a = PIN_B0;
   pTiroSU.b = PIN_B1;
   pTiroSU.c = PIN_B2;
   pTiroSU.d = PIN_B3;
   
   pTiroSD.a = PIN_B4;
   pTiroSD.b = PIN_B5;
   pTiroSD.c = PIN_B6;
   pTiroSD.d = PIN_B7;
   
   pTiempoSU.a = PIN_D0;
   pTiempoSU.b = PIN_D1;
   pTiempoSU.c = PIN_D2;
   pTiempoSU.d = PIN_D3;
   
   pTiempoSD.a = PIN_D4;
   pTiempoSD.b = PIN_D5;
   pTiempoSD.c = PIN_D6;
   pTiempoSD.d = PIN_D7;
   
   pTiempoMU.a = PIN_A4;
   pTiempoMU.b = PIN_A5;
   pTiempoMU.c = PIN_A6;
   pTiempoMU.d = PIN_A7;
   
   delay_ms(DEFAULT_D);
   
   if(DEBUG) {fputs("> Habilitacion de displays",RS232);}
   output_bit(DISPLAY, ON);
   output_bit(MINUTOD, ON);
   output_bit(PERIODO1, ON);
   output_bit(PERIODO2, ON);
   output_bit(PERIODO3, ON);
   output_bit(PERIODO4, ON);
   delay_ms(DEFAULT_D);
   output_bit(DISPLAY, OFF);
   output_bit(MINUTOD, OFF);
   output_bit(PERIODO1, OFF);
   output_bit(PERIODO2, OFF);
   output_bit(PERIODO3, OFF);
   output_bit(PERIODO4, OFF);
   delay_ms(DEFAULT_D);
   output_bit(DISPLAY, ON);
   output_bit(MINUTOD, ON);
   output_bit(PERIODO1, ON);
   output_bit(PERIODO2, ON);
   output_bit(PERIODO3, ON);
   output_bit(PERIODO4, ON);
   delay_ms(DEFAULT_D);
   output_bit(MINUTOD, OFF);
   output_bit(PERIODO1, OFF);
   output_bit(PERIODO2, OFF);
   output_bit(PERIODO3, OFF);
   output_bit(PERIODO4, OFF);
   
   if(DEBUG) {fputs("> Habilitacion de interrupciones",RS232);}
   enable_interrupts(INT_RDA);
   enable_interrupts(INT_SSP);
   enable_interrupts(GLOBAL);
}

void main()
{
   setup();

   while(TRUE)
   {

      //TODO: User Code
   }

}

#INT_RDA
void  RDA_isr(void) 
{
   char c;
   c = fgetc(RS232);
if(cmdGet)
{
   if(c == '#' || c == '\r')
   {
      cmdGet = false;
      strcpy(cmd, rcmd);
      parseCommand();
   }
   else
   {
   if(cmdIndex < 9)
      {
         rcmd[cmdIndex] = c;
         cmdIndex++;
      }
   }
}
      if(c == '-')
   {
       cmdGet = true; 
       rcmd = "\0\0\0\0\0\0\0\0\0";
       cmdIndex = 0;
   }
}

#INT_SSP
void  SSP_isr(void) 
{

}

void parseI2CCommand(void)
{
   char c = icmd;
   switch(c)
   {
      case I2C_CMD_TEST:   doTest();
                           break;
   }
}

void doTest(void)
{
   if(DEBUG) {fputs("> Rutina de prueba",RS232);}
   output_bit(MINUTOD, OFF);
   output_bit(PERIODO1, OFF);
   output_bit(PERIODO2, OFF);
   output_bit(PERIODO3, OFF);
   output_bit(PERIODO4, OFF);
   for(int i=0; i<10; i++)
   {
      showNumber(i, pTiroSD);
      showNumber(i, pTiroSU);
      showNumber(i, pTiempoSD);
      showNumber(i, pTiempoSU);
      showNumber(i, pTiempoMU);
      output_toggle(MINUTOD);
      output_toggle(PERIODO1);
      output_toggle(PERIODO2);
      output_toggle(PERIODO3);
      output_toggle(PERIODO4);
      delay_ms(DEFAULT_D);
   }
}

void parseCommand(void)
{
   char c[10];
   strcpy(c, cmd);
   switch(c[0])
   {
      case '0':   if(DEBUG) {fputs("\r> Activacion manual de puerto",RS232);}
                  switch(c[2])
                  {
                     case '1':   showNumber(char2int(c[3]), pTiroSU);
                                 break;
                     case '2':   showNumber(char2int(c[3]), pTiroSD);
                                 break;
                     case '3':   showNumber(char2int(c[3]), pTiempoSD);
                                 break;
                     case '4':   showNumber(char2int(c[3]), pTiempoSU);
                                 break;
                     case '5':   showNumber(char2int(c[3]), pTiempoMU);
                                 break;
                  }
                  break;
      case 'X':   doTest(); //Rutina de prueba
                  break;
      case 'Z':   if(DEBUG) {fputs("\r> Reseteo general...!",RS232);}
                  delay_ms(100);
                  if(DEBUG) {fputs("\r> (5)",RS232);}
                  delay_ms(100);
                  if(DEBUG) {fputs("\r> (4)",RS232);}
                  delay_ms(100);
                  if(DEBUG) {fputs("\r> (3)",RS232);}
                  delay_ms(100);
                  if(DEBUG) {fputs("\r> (2)",RS232);}
                  delay_ms(100);
                  if(DEBUG) {fputs("\r> (1)",RS232);}
                  delay_ms(100);
                  if(DEBUG) {fputs("\r> (0)",RS232);}
                  doReset();
                  
   }
}

void showNumber(int8 n, tPort p)
{
   int1 a=0, b=0, c=0, d=0;
   switch(n)
   {
      case 1:  a=1;
               break;
      case 2:  b=1;
               break;
      case 3:  a=1; b=1;
               break;
      case 4:  c=1;
               break;
      case 5:  c=1; a=1;
               break;
      case 6:  c=1; b=1;
               break;
      case 7:  c=1; b=1; a=1;
               break;
      case 8:  d=1;
               break;
      case 9:  d=1; a=1;
               break;
   }
   output_bit(p.a, a);
   output_bit(p.b, b);
   output_bit(p.c, c);
   output_bit(p.d, d);
}

int8 char2int(char c)
{
   switch(c)
   {
      case '0':   return 0;
                  break;
      case '1':   return 1;
                  break;
      case '2':   return 2;
                  break;
      case '3':   return 3;
                  break;
      case '4':   return 4;
                  break;
      case '5':   return 5;
                  break;
      case '6':   return 6;
                  break;
      case '7':   return 7;
                  break;
      case '8':   return 8;
                  break;
      case '9':   return 9;
                  break;
   }
   return 0;
}

void doReset(void)
{

   reset_cpu();
}


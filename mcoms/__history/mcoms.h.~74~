/**:COPYRIGHT

           _/       _/
        _/_/_/   _/_/
         _/       _/
        _/       _/
       _/_/   _/_/_/
    
   t1soluciones © 2020
          PARA
       Grupo  APM
    
 */
 
 // *AUTOR:    Victor Noguedad
 // *ARCHIVO:  mscoms.c
 // *RESUMEN:  Programa principal del modulo de comunicaciones
 
#include <16F887.h>

#define FW_VERSION   "1.5"
#define FW_REVISION  "D"

// ::[CONFIGURACION DE PIC]::
#device ADC=16

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES NOPUT                    //No Power Up Timer
#FUSES NOMCLR                   //Master Clear pin used for I/O
#FUSES NOPROTECT                //Code not protected from reading
#FUSES NOCPD                    //No EE protection
#FUSES NOBROWNOUT               //No brownout reset
#FUSES IESO                     //Internal External Switch Over mode enabled
#FUSES FCMEN                    //Fail-safe clock monitor enabled
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES BORV40                   //Brownout reset at 4.0V
#FUSES NOWRT                    //Program memory not write protected

#use delay(internal=8MHz)

// ::[CONFIGURACION DE IO]::
#use FIXED_IO( A_outputs=PIN_A7,PIN_A6,PIN_A5,PIN_A4 )
#use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 )
#use FIXED_IO( C_outputs=PIN_C5 )
#use FIXED_IO( D_outputs=PIN_D7,PIN_D6,PIN_D5,PIN_D4,PIN_D3,PIN_D2,PIN_D1,PIN_D0 )
#use FIXED_IO( E_outputs=PIN_E0 )

#define I2C_SCL   PIN_C3
#define I2C_SDA   PIN_C4
#define RS232_TX  PIN_C6
#define RS232_RX  PIN_C7
#define DISPLAY   PIN_E0
#define DEBUG     input_state(PIN_C2)

// ::[CONFIGURACION PUERTOS]::
#use rs232  (baud=9600,parity=N,xmit=RS232_TX,rcv=RS232_RX,bits=8,stream=RS232)
#use i2c    (Master,Fast,sda=I2C_SDA,scl=I2C_SCL)
#use timer  (timer=0,tick=100us,bits=32,NOISR)

// ::[DEFINICIONES]::
#define TICK_TYPE       unsigned int32
#define I2C_TIMER       0x0A
#define I2C_SCORE       0x0C

#define I2C_CMD_INIT    0xF0
#define I2C_CMD_TEST    0xFF
#define I2C_CMD_RESET   0xFD
#define I2C_CMD_PER0    0x70
#define I2C_CMD_PER1    0x71
#define I2C_CMD_PER2    0x72
#define I2C_CMD_PER3    0x73
#define I2C_CMD_PER4    0x74
#define I2C_CMD_MDON    0x75
#define I2C_CMD_MDOF    0x76
#define I2C_CMD_POS0    0x70
#define I2C_CMD_POSL    0x71
#define I2C_CMD_POSV    0x72
#define I2C_CMD_CLON    0x73
#define I2C_CMD_CLOF    0x74
#define I2C_CMD_CVON    0x75
#define I2C_CMD_CVOF    0x76
#define I2C_CMD_BUZ1    0x81
#define I2C_CMD_BUZ2    0x82
#define I2C_CMD_BUZ3    0x83

#define ON              1
#define OFF             0
#define DEFAULT_D       200
#define I2CWAIT         50

#define   PuertoA    1
#define   PuertoB    2
#define   PuertoC    3
#define   PuertoD    4
#define   PuertoE    5
#define   PuertoF    6

// ::[DECLARACIONES]::
//Estructura para el puerto
typedef struct sPort    
{
   int a;
   int b;
   int c;
   int d;
} tPort;

//Datos para la captura de comandos del RS232
char  cmd[10]  = "\0\0\0\0\0\0\0\0\0";
char  rcmd[10] = "\0\0\0\0\0\0\0\0\0";
int8  cmdIndex = 0;
int1  cmdGet   = false;

//Puertos de Displays
tPort pNJugadorU;
tPort pNJugadorD;
tPort pFJugadorU;
tPort pFJugadorD;

//Tiempo
int8 m_d=0;
int8 m_u=0;
int8 s_d=0;
int8 s_u=0;
int1 enableTime = false;

//Tiro
int8 sh_d=0;
int8 sh_u=0;
int1 enableShot = false;

int1 pauseTime = false;

int8 scoreLU =0;
int8 scoreLD =0;
int1 scoreLC =0;
int8 scoreVU =0;
int8 scoreVD =0;
int1 scoreVC =0;

// ::[PROTOTIPOS]::

TICK_TYPE GetTickDifference(TICK_TYPE currTick, TICK_TYPE prevTick);
void RDA_isr(void);
void SSP_isr(void);
void timeTick(void);
void parseCommand(void);
void doTest(void);
void showNumber(int8, tPort);
int8 char2int(char); 
void doReset(void);
void sendN2Port(int8, int8, int8);
void timeSet(int8, int8, int8, int8);
void shotSet(int8, int8);
void timePass();
void shotPass();
void doBuzz(int);
void setScoreL (int8, int8, int8);
void setScoreV (int8, int8, int8);
void i2c_send(int8, int8);
void addScoreL (int8);
void addScoreV (int8);
void resScoreL (void);
void resScoreV (void);
